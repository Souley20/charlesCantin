import defDebug from 'debug';
import { DEBUG_PREFIX } from './constants.js';
import { hashAlgorithmMap, noHashSpecifiedMessage, hashesScriptSrcAttr, hashesScriptSrcElem, hashesStyleSrcAttr, hashesStyleSrcElem } from './hash.js';
const debug = defDebug(`${DEBUG_PREFIX}:source-values`);
/**
 * @internal
 */
const cspSourceValues = ({ algorithm, hashes, values }) => {
    const i = values.indexOf(algorithm);
    if (i !== -1) {
        debug(`Found ${algorithm} at index ${i}.`);
        return [...values.slice(0, i), ...values.slice(i + 1), ...hashes];
    }
    else {
        return values;
    }
};
const hashAlgorithm = ({ directive, directives }) => {
    const hash_algo = hashAlgorithmMap(directives);
    return hash_algo[directive];
};
/**
 * @internal
 */
export const cspSourceValuesScriptAttr = async ({ directive, directives, patterns }) => {
    const algorithm = hashAlgorithm({ directive, directives });
    if (!algorithm) {
        debug(noHashSpecifiedMessage(directive));
        return directives[directive];
    }
    debug(`CSP directive ${directive}: parse HTML and compute ${algorithm} hashes`);
    const hashes = await hashesScriptSrcAttr({ algorithm, patterns });
    debug(`CSP directive ${directive}: allow hashes %O`, hashes);
    return cspSourceValues({
        algorithm,
        hashes,
        values: directives[directive] || []
    });
};
/**
 * @internal
 */
export const cspSourceValuesScriptElem = async ({ directive, directives, patterns }) => {
    const algorithm = hashAlgorithm({ directive, directives });
    if (!algorithm) {
        debug(noHashSpecifiedMessage(directive));
        return directives[directive];
    }
    debug(`CSP directive ${directive}: parse HTML and compute ${algorithm} hashes`);
    const hashes = await hashesScriptSrcElem({
        algorithm,
        patterns
    });
    debug(`CSP directive ${directive}: allow hashes %O`, hashes);
    return cspSourceValues({
        algorithm,
        hashes,
        values: directives[directive] || []
    });
};
/**
 * @internal
 */
export const cspSourceValuesStyleAttr = async ({ directive, directives, patterns }) => {
    const algorithm = hashAlgorithm({ directive, directives });
    if (!algorithm) {
        debug(noHashSpecifiedMessage(directive));
        return directives[directive];
    }
    debug(`CSP directive ${directive}: parse HTML and compute ${algorithm} hashes`);
    const hashes = await hashesStyleSrcAttr({ algorithm, patterns });
    debug(`CSP directive ${directive}: allow hashes %O`, hashes);
    return cspSourceValues({
        algorithm,
        hashes,
        values: directives[directive] || []
    });
};
/**
 * @internal
 */
export const cspSourceValuesStyleElem = async ({ directive, directives, patterns }) => {
    const algorithm = hashAlgorithm({ directive, directives });
    if (!algorithm) {
        debug(noHashSpecifiedMessage(directive));
        return directives[directive];
    }
    debug(`CSP directive ${directive}: parse HTML and compute ${algorithm} hashes`);
    const hashes = await hashesStyleSrcElem({
        algorithm,
        patterns
    });
    debug(`CSP directive ${directive}: allow hashes %O`, hashes);
    return cspSourceValues({
        algorithm,
        hashes,
        values: directives[directive] || []
    });
};
//# sourceMappingURL=source-values.js.map