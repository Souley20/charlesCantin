type NodeType = 'element' | 'comment' | 'text';
interface Node {
    type: NodeType;
}
interface Attribute {
    key: string;
    value?: string;
}
export interface Element extends Node {
    type: 'element';
    tagName: string;
    children: Node[] | Element[];
    attributes: Attribute[];
}
interface HimalayaJson {
    children: any[];
    content: string;
    tagName: string;
    filter: (predicate: (x: any) => boolean) => any;
}
export declare const tap: (json: HimalayaJson) => HimalayaJson;
/**
 * Parses a HTML file and retrieves the content of all `<script>` tags in `<head>`.
 *
 * @internal
 */
export declare const scriptTagsContents: (filepath: string) => Promise<string[]>;
/**
 * Parses a HTML file and retrieves the content of all `<style>` tags in `<head>`.
 *
 * @internal
 */
export declare const styleTagsContents: (filepath: string) => Promise<string[]>;
/**
 * Parses a HTML file and retrieves the content of all inline event handlers in `<body>`.
 *
 * @internal
 */
export declare const inlineEventHandlerContents: (filepath: string) => Promise<string[]>;
/**
 * Parses a HTML file and retrieves the content of all inline styles in `<body>`.
 *
 * @internal
 */
export declare const inlineStyleContents: (filepath: string) => Promise<string[]>;
export {};
//# sourceMappingURL=html-parsers.d.ts.map