import { z } from 'zod';
export declare const config: z.ZodObject<{
    allowDeprecatedDirectives: z.ZodDefault<z.ZodBoolean>;
    directives: z.ZodDefault<z.ZodAny>;
    excludePatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globPatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globPatternsDetach: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    hosting: z.ZodOptional<z.ZodString>;
    includePatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    jsonRecap: z.ZodDefault<z.ZodBoolean>;
    reportOnly: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    allowDeprecatedDirectives: boolean;
    excludePatterns: string[];
    globPatterns: string[];
    globPatternsDetach: string[];
    includePatterns: string[];
    jsonRecap: boolean;
    reportOnly: boolean;
    directives?: any;
    hosting?: string | undefined;
}, {
    allowDeprecatedDirectives?: boolean | undefined;
    directives?: any;
    excludePatterns?: string[] | undefined;
    globPatterns?: string[] | undefined;
    globPatternsDetach?: string[] | undefined;
    hosting?: string | undefined;
    includePatterns?: string[] | undefined;
    jsonRecap?: boolean | undefined;
    reportOnly?: boolean | undefined;
}>;
/**
 * Options for this Eleventy plugin.
 *
 * @public
 */
export declare const options: z.ZodDefault<z.ZodObject<{
    allowDeprecatedDirectives: z.ZodDefault<z.ZodBoolean>;
    directives: z.ZodDefault<z.ZodAny>;
    excludePatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globPatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    globPatternsDetach: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    hosting: z.ZodOptional<z.ZodString>;
    includePatterns: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    jsonRecap: z.ZodDefault<z.ZodBoolean>;
    reportOnly: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    allowDeprecatedDirectives: boolean;
    excludePatterns: string[];
    globPatterns: string[];
    globPatternsDetach: string[];
    includePatterns: string[];
    jsonRecap: boolean;
    reportOnly: boolean;
    directives?: any;
    hosting?: string | undefined;
}, {
    allowDeprecatedDirectives?: boolean | undefined;
    directives?: any;
    excludePatterns?: string[] | undefined;
    globPatterns?: string[] | undefined;
    globPatternsDetach?: string[] | undefined;
    hosting?: string | undefined;
    includePatterns?: string[] | undefined;
    jsonRecap?: boolean | undefined;
    reportOnly?: boolean | undefined;
}>>;
/**
 * Plugin options.
 *
 * @public
 * @interface
 */
export type Options = z.infer<typeof options>;
export type VercelJSONHeadersEntry = {
    key: string;
    value: string;
};
export type VercelJSONHeaderObject = {
    source: string;
    headers: VercelJSONHeadersEntry[];
    has?: any[];
    missing?: any[];
};
export type VercelJSON = {
    headers: VercelJSONHeaderObject[];
};
//# sourceMappingURL=schemas.d.ts.map